services:
  db:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: hexa
      POSTGRES_PASSWORD: hexa
      POSTGRES_DB: hexa
      PGDATA: /data/postgres
    volumes:
      - db:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d hexa -U hexa" ]
      interval: 30s
      timeout: 10s
      retries: 5
  
  redis:
    container_name: redis
    image: redis:6.2-alpine
    restart: always
    env_file:
      - .env
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - redis:/data
    networks:
      - db

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: docker/hexa/qa.Dockerfile
    command: /bin/sh -c "uv run hexa api"
    # environment:
    #   BACKEND_PATH: ${BACKEND_PATH}
    #   DATABASE_URL: ${DATABASE_URL}
    #   REDIS_URL: ${REDIS_URL}
    env_file:
      - .env
    # volumes:
    #   - .env:/app/.env
    develop:
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: .
          target: /app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - db
      - frontnet

  nginx:
    container_name: nginx
    env_file:
      - .env

    command: 
      - /bin/sh 
      - -c 
      - |
        envsubst '$$HEXA_BACKEND_ADDR $$HEXA_FRONTEND_ADDR $$BACKEND_PATH' \
        < /etc/nginx/templates/default.conf.template \
        > /etc/nginx/conf.d/default.conf

        nginx -g 'daemon off;'    
    build:
      context: ./docker/nginx
      dockerfile: qa.Dockerfile
    volumes:
      - ./docker/nginx/default.qa.conf:/etc/nginx/templates/default.conf.template
    restart: always
    ports:
      - 80:80
    depends_on:
      backend:
        condition: service_started
    networks:
      - frontnet

networks:
  frontnet:
  db:
    driver: bridge

volumes:
  db:
  redis:
    driver: local